name: Build & Deploy Pages (fable-collector)

on:
  # Lancement manuel avec options
  workflow_dispatch:
    inputs:
      tz:
        description: "IANA timezone pour le filtre local (ex: Africa/Tunis)"
        default: "Africa/Tunis"
      local_hours_csv:
        description: "Heures locales autorisées (HH séparées par des virgules)"
        default: "00,06,12,18"
      force:
        description: "Ignorer le filtre d'heure locale et exécuter maintenant"
        type: boolean
        default: false
      window_hours:
        description: "Horizon de prévision en heures"
        default: "48"
      start_iso:
        description: "Optionnel: début ISO (YYYY-MM-DDTHH:MM) pour cibler la fenêtre"
        required: false
      only_sites:
        description: "Optionnel: restreindre à certains sites (CSV: noms/ids)"
        required: false
      reader_home:
        description: "Nom du fichier JSON du port d’attache pour le reader"
        default: "gammarth-port.json"

  # Planifié : 4×/jour + garde-fou horaire
  schedule:
    - cron: "0 23,5,11,17 * * *"   # ~00/06/12/18 Africa/Tunis (UTC+1)
    - cron: "0 * * * *"

  # Rebuild si ces fichiers changent
  push:
    paths:
      - ".github/workflows/pages.yml"
      - "requirements.txt"
      - "main.py"
      - "reader.py"
      - "sites.yaml"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.gate.outputs.should_run }}
      reason: ${{ steps.gate.outputs.reason }}
      tz_effective: ${{ steps.gate.outputs.tz_effective }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Filtre heure locale / TZ ----
      - name: Gate on local hour (or force)
        id: gate
        env:
          DEFAULT_TZ: "Africa/Tunis"
          DEFAULT_LOCAL_HOURS: "00,06,12,18"
          INPUT_TZ: ${{ github.event_name == 'workflow_dispatch' && inputs.tz || '' }}
          INPUT_HOURS: ${{ github.event_name == 'workflow_dispatch' && inputs.local_hours_csv || '' }}
          INPUT_FORCE: ${{ github.event_name == 'workflow_dispatch' && (inputs.force && 'true' || 'false') || 'false' }}
        run: |
          TZ_INPUT="${INPUT_TZ:-$DEFAULT_TZ}"
          HOURS_CSV="${INPUT_HOURS:-$DEFAULT_LOCAL_HOURS}"
          FORCE="${INPUT_FORCE}"

          if [ "$FORCE" = "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "reason=forced" >> $GITHUB_OUTPUT
          else
            hour=$(TZ=$TZ_INPUT date +%H)
            if echo "$HOURS_CSV" | tr ',' '\n' | grep -qx "$hour"; then
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "reason=matched_local_hour_$hour" >> $GITHUB_OUTPUT
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "reason=skipped_local_hour_$hour" >> $GITHUB_OUTPUT
            fi
          fi
          echo "tz_effective=$TZ_INPUT" >> $GITHUB_OUTPUT

      - name: Show gate decision
        run: |
          echo "Gate: ${{ steps.gate.outputs.should_run }} (${{ steps.gate.outputs.reason }}) TZ=${{ steps.gate.outputs.tz_effective }}"

      - name: Setup Python
        if: steps.gate.outputs.should_run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        if: steps.gate.outputs.should_run == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ---- Collecte JSON (avec petit retry réseau) ----
      - name: Generate JSON (window, tz, targeting)
        if: steps.gate.outputs.should_run == 'true'
        env:
          FABLE_TZ: ${{ github.event_name == 'workflow_dispatch' && inputs.tz || steps.gate.outputs.tz_effective }}
          FABLE_WINDOW_HOURS: ${{ github.event_name == 'workflow_dispatch' && inputs.window_hours || '48' }}
          FABLE_START_ISO: ${{ github.event_name == 'workflow_dispatch' && inputs.start_iso || '' }}
          FABLE_ONLY_SITES: ${{ github.event_name == 'workflow_dispatch' && inputs.only_sites || '' }}
        run: |
          set -e
          echo "Using FABLE_TZ=$FABLE_TZ"
          echo "Using FABLE_WINDOW_HOURS=$FABLE_WINDOW_HOURS"
          [ -n "$FABLE_START_ISO" ] && echo "Using FABLE_START_ISO=$FABLE_START_ISO"
          [ -n "$FABLE_ONLY_SITES" ] && echo "Using FABLE_ONLY_SITES=$FABLE_ONLY_SITES"

          python main.py || (echo "Collector failed once, retrying in 6s..." && sleep 6 && python main.py)

      # ---- Construire index.json AVANT le reader ----
      - name: Build index.json (catalogue)
        if: steps.gate.outputs.should_run == 'true'
        run: |
          set -e
          mkdir -p public
          echo '{ "generated_at": "'"$(TZ=${{ steps.gate.outputs.tz_effective }} date -Iseconds)"'", "files": [' > public/index.json
          first=1
          # Exclure l'index lui-même et windows.json (métadonnées)
          for f in $(find public -maxdepth 1 -type f -name '*.json' ! -name 'index.json' ! -name 'windows.json' | sort); do
            size=$(stat -c%s "$f" 2>/dev/null || stat -f%z "$f")
            mtime=$(date -r "$f" -Iseconds 2>/dev/null || stat -f "%Sm" -t "%Y-%m-%dT%H:%M:%S%z" "$f")
            [ $first -eq 1 ] || echo ',' >> public/index.json
            echo '  { "path": "'$(basename "$f")'", "size": '"$size"', "modified": "'"$mtime"'" }' >> public/index.json
            first=0
          done
          echo '] }' >> public/index.json
          echo "Built public/index.json:"
          cat public/index.json

      # ---- (facultatif) Dump rapide pour debug ----
      - name: Show one site JSON (debug)
        if: steps.gate.outputs.should_run == 'true'
        run: |
          echo "==== public listing ===="
          ls -lah public || true
          echo "==== head of ${{ github.event.inputs.reader_home || 'gammarth-port.json' }} ===="
          head -c 1500 "public/${{ github.event.inputs.reader_home || 'gammarth-port.json' }}" || true
          echo

      # ---- Reader FABLE : détecte les fenêtres Family GO et produit windows.json ----
      - name: Run FABLE reader (detect Family GO)
        if: steps.gate.outputs.should_run == 'true'
        run: |
          set -e
          python reader.py \
            --from-dir public \
            --out public \
            --home "${{ github.event_name == 'workflow_dispatch' && inputs.reader_home || 'gammarth-port.json' }}"

      # ---- Résumé dans l’onglet Summary (facultatif mais utile) ----
      - name: Job summary (windows)
        if: steps.gate.outputs.should_run == 'true'
        run: |
          if [ -f public/windows.json ]; then
            {
              echo "## FABLE — fenêtres Family GO"
              echo
              python - <<'PY'
import json
d=json.load(open('public/windows.json','r',encoding='utf-8'))
wins=d.get('windows',[])
if not wins:
    print("- Aucune fenêtre Family GO détectée.")
else:
    for w in wins:
        print(f"- **{w.get('dest_name','?')}** ({w.get('dest_slug','?')}):")
        for seg in w.get('windows',[]):
            print(f"  - {seg['start']} → {seg['end']} ({seg['hours']} h)")
PY
              echo
              echo "_Fichier généré_: \`public/windows.json\`"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: List public artifacts
        if: steps.gate.outputs.should_run == 'true'
        run: |
          echo "==== public ===="
          ls -lah public || true
          echo "==============="

      # ---- Publication Pages ----
      - name: Setup Pages
        if: steps.gate.outputs.should_run == 'true'
        uses: actions/configure-pages@v5

      - name: Upload artifact
        if: steps.gate.outputs.should_run == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    if: needs.build.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
